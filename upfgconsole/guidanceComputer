public enum GuidanceMode
{
    Idle,
    Prelaunch,
    Ascent,
    OrbitInsertion,
    Abort,
}

class guidanceComputer
{
    public Target target;
    public Vehicle vehicle;
    public Upfg upfg;
    public GravityTurn gravityTurn;
    public Vector3 guidanceCommand;
    public GuidanceMode Mode { get; set; } = GuidanceMode.Idle;

    public guidanceComputer(Target target, Vehicle vehicle, Simulator sim, string missionPath)
    {

        MissionConfig mission = Utils.ReadMission(missionPath);
        vehicle = Vehicle.FromStages(mission);
        Dictionary<string, float> desOrbit = mission.Orbit;

        target = new Target();
        target.SetTarget(desOrbit, sim);


    }

    public void MainLoop(Simulator sim)
    {
        while (true)
        {
            switch (Mode)
            {
                case GuidanceMode.Idle:
                    IdleRoutine(sim);
                    break;
                case GuidanceMode.Prelaunch:
                    PrelaunchRoutine(sim);
                    break;
                case GuidanceMode.Ascent:
                    AscentRoutine(sim);
                    break;
                case GuidanceMode.OrbitInsertion:
                    OrbitInsertionRoutine(sim);
                    break;
                case GuidanceMode.Abort:
                    AbortRoutine(sim);
                    break;
            }
            // Add exit condition or await/delay as needed
            Utils.PrintVars(guidance, sim, target, vehicle);
        }

    }

    public void iterateUPFG(Simulator sim)
    {
        upfg = new Upfg();
        upfg.Setup(sim, target);
    }
        private void IdleRoutine(Simulator sim)
    {
        // Logic for idle state
        // This could be waiting for user input or a specific condition to change the mode
        Console.WriteLine("System is idle. Waiting for prelaunch conditions...");
        Thread.Sleep(1000); // Simulate waiting
        Mode = GuidanceMode.Prelaunch; // Transition to prelaunch state
    }

    private void PrelaunchRoutine(Simulator sim)
    {
        

    }


    private void AscentRoutine(Simulator sim)
    {
        // Logic for ascent
    }

    private void OrbitInsertionRoutine(Simulator sim)
    {
        // Logic for orbit insertion
    }

    private void AbortRoutine(Simulator sim)
    {
        // Logic for abort
    }

}
